{"version":3,"sources":["appLayout/AppLayout.tsx","appLayout/AppHeader.tsx","appLayout/Logo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Content","Footer","AppLayout","className","style","color","icon","faCopyright","AppHeader","gutter","span","paddingTop","Logo","fontSize","faShieldAlt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAWQA,G,MAA4BC,IAA5BD,QAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEZC,EAAsC,WAC/C,OACI,kBAAC,IAAD,CAAQC,UAAU,gBACd,kBAACL,EAAD,CAAQK,UAAU,cACd,kBAAC,EAAD,OAEJ,kBAACH,EAAD,CAASG,UAAU,gBAGnB,kBAACF,EAAD,CAAQE,UAAU,cACd,yBAAKC,MAAO,CAACC,MAAQ,UAAU,kBAAC,IAAD,CAAiBC,KAAMC,MAAtD,2B,gBChBHC,EAAsC,WAC/C,OACI,kBAAC,IAAD,CAAKC,OAAQ,GAAIN,UAAU,cACvB,kBAAC,IAAD,CAAKO,KAAM,EAAGN,MAAO,CAACO,WAAY,KAC9B,kBAAC,EAAD,SCLHC,EAA4B,WACrC,OACI,yBAAKT,UAAU,YACX,kBAAC,IAAD,CAAiBC,MAAO,CAACS,SAAU,IAAMP,KAAMQ,MAC/C,iDCEGC,G,MARO,WACpB,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,SCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.116fed90.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopyright } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { AppHeader } from './';\r\n\r\nimport './AppLayout.scss';\r\n\r\ntype AppLayoutProps = {};\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nexport const AppLayout: React.FC<AppLayoutProps> = () => {\r\n    return (\r\n        <Layout className=\"app-viewport\">\r\n            <Header className=\"app-header\">\r\n                <AppHeader />\r\n            </Header>\r\n            <Content className=\"app-content\">\r\n                \r\n            </Content>\r\n            <Footer className=\"app-footer\">\r\n                <div style={{color:  'white'}}><FontAwesomeIcon icon={faCopyright}/> 2020 Nikit Parajuli</div>\r\n            </Footer>\r\n        </Layout>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nimport { Logo } from './';\r\n\r\ntype AppHeaderProps = {};\r\n\r\nexport const AppHeader: React.FC<AppHeaderProps> = () => {\r\n    return (\r\n        <Row gutter={24} className=\"app-header\">\r\n            <Col span={4} style={{paddingTop: 10}}>\r\n                <Logo />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faShieldAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\ntype LogoProps = {};\r\n\r\nexport const Logo: React.FC<LogoProps> = () => {\r\n    return (\r\n        <div className=\"app-logo\">\r\n            <FontAwesomeIcon style={{fontSize: 40}}  icon={faShieldAlt}/> \r\n            <span>honest number</span>\r\n        </div>\r\n    );\r\n}","import React from 'react';\n\nimport { AppLayout } from './appLayout';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppLayout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'antd/dist/antd.css'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}